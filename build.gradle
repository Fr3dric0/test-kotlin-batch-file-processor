buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }
}

apply plugin: 'application'

mainClassName = "io.lindhagen.batchfileprocessor.CommuteWeatherApplicationKt"

repositories {
    mavenCentral()
}

apply plugin: 'kotlin'

compileKotlin.kotlinOptions.jvmTarget = "11"
compileTestKotlin.kotlinOptions.jvmTarget = "11"
compileTestKotlin.kotlinOptions.freeCompilerArgs += "-Xjvm-default=all"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

test {
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "512m" // maximum heap size
//    jvmArgs '-XX:MaxPermSize=256m' // mem argument for the test JVM
    useJUnitPlatform()
}

dependencies {
    implementation "com.amazonaws:aws-lambda-java-events:3.11.0"
    implementation "org.http4k:http4k-aws:${http4kVersion}"
    implementation "org.http4k:http4k-client-apache-async:${http4kVersion}"
    implementation "org.http4k:http4k-client-okhttp:${http4kVersion}"
    implementation "org.http4k:http4k-cloudnative:${http4kVersion}"
    implementation "org.http4k:http4k-contract:${http4kVersion}"
    implementation("org.http4k:http4k-metrics-micrometer:$http4kVersion")
    implementation "org.http4k:http4k-core:${http4kVersion}"
    implementation "org.http4k:http4k-format-jackson:${http4kVersion}"
    implementation "org.http4k:http4k-format-kotlinx-serialization:${http4kVersion}"
    implementation "org.http4k:http4k-resilience4j:${http4kVersion}"
    implementation "org.http4k:http4k-serverless-core:${http4kVersion}"
    implementation "org.http4k:http4k-serverless-lambda:${http4kVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"

    // Defines the AWS SDK plattform module (controls which version to use)
    implementation(platform('software.amazon.awssdk:bom:2.15.0'))
    // Specific AWS SDKs
    implementation("software.amazon.awssdk:s3")
    implementation("software.amazon.awssdk:eventbridge")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

    // Logging
    implementation("org.slf4j:slf4j-api:1.7.36")
    implementation("ch.qos.logback:logback-classic:1.2.11")
    implementation("net.logstash.logback:logstash-logback-encoder:$logstashLogbackEncoderVersion")

    testImplementation "org.http4k:http4k-testing-approval:${http4kVersion}"
    testImplementation "org.http4k:http4k-testing-chaos:${http4kVersion}"
    testImplementation "org.http4k:http4k-testing-hamkrest:${http4kVersion}"
    testImplementation "org.http4k:http4k-testing-strikt:${http4kVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    testImplementation("io.mockk:mockk:1.13.1")

    testImplementation("com.oneeyedmen:okeydoke:1.3.3")

    testImplementation("org.testcontainers:testcontainers:1.17.3")
    testImplementation("org.testcontainers:junit-jupiter:1.17.3")
    testImplementation("org.testcontainers:localstack:1.17.3")

    // Included for TestContainers sake
    // otherwise we will get java.lang.ClassNotFoundException: com.amazonaws.auth.AWSCredentials
    testImplementation('com.amazonaws:aws-java-sdk-s3:1.12.13')
}

task buildLambdaZip(type: Zip) {
    from compileKotlin
    from processResources
    into('lib') {
        from configurations.compileClasspath
    }
}
